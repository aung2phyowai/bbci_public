function custom_plotSSD(output, dir_saveResults, varargin)
% custom_plotSSD - visualizes the results of a SSD analysis applied in 
% a chron. 5-fold crossvalidation procedure for a fixed paramter setting. 
% The function returns two figures that can be accessed independently.
%
% Synopsis
%  custom_plotSSD(output, dir_saveResults, params, varargin)
%
% Arguments: 
%   output : struct generated by the function custom_spoc() containing all
%   the results and parameter settings from a SPoC analysis on a single 
%   parameter setting
%   dir_saveResults: electrode montage 
%
% Options:
%   saveToFile: optional flag to save the plots to a file
%   spocCompIdx: specifies the index of the SPoC component that will be
%   visualized
%   figFlags: array containing flags for each plot (e.g. [1 0] only creates
%   Fig. 1)
%
% Returns:
%   -
%
%
% Andreas Meinel, December 2014

%% Setting up the default values 

def_saveToFile = false; % saves the figures to file
def_compIdx = 1; % specifies the index of the SSD component
def_figFlags = [1 1]; % flags to en- or disable the two figures
def_showDataSplit = true; % flag to visualize the training/test data split

p = inputParser;

addParamValue(p,'saveToFile', def_saveToFile);
addParamValue(p,'compIdx', def_compIdx);
addParamValue(p,'figFlags', def_figFlags);
addParamValue(p,'showDataSplit', def_showDataSplit);

parse(p,varargin{:})
options = p.Results;


%% Plotting the SSD results 
N_folds = 5;

params = output.params;
out = output.out;

close all
mnt = mnt_setElectrodePositions(params.clab);

%% Figure 1: SSD Patterns on training and test data for one component

if options.figFlags(1)
    
    % Prepare pattern matrices for each subfold on training and test data
    A_tr = out.A_ssd;
    A_te = out.A_te_ssd;
    
    % variables for the test/training set visualization
    x = 1:1:N_folds;
    y = ones(1,N_folds);
    
    % initialize the colorbar limits of the patterns
    cbarLimUp = 0;
    cbarLimLow = 0;
    
    for ii=1:N_folds
        tmpUp = max(A_tr{ii}(:,options.compIdx));
        tmpLow = min(A_tr{ii}(:,options.compIdx));
        if tmpUp > cbarLimUp
            cbarLimUp = tmpUp;
        elseif tmpLow < cbarLimLow
            cbarLimLow = tmpLow;
        end
        tmpUp = max(A_te{ii}(:,options.compIdx));
        tmpLow = min(A_te{ii}(:,options.compIdx));
        if tmpUp > cbarLimUp
            cbarLimUp = tmpUp;
        elseif tmpLow < cbarLimLow
            cbarLimLow = tmpLow;
        end
    end
    
    % Plot patterns across subfolds
    [axes_tr, h_tr] = custom_plotSubfoldPatterns(A_tr,mnt,'compIndex',...
        options.compIdx,'showTitle', false, 'colorbarLim',[cbarLimLow, cbarLimUp]);
    [axes_te, h_te] = custom_plotSubfoldPatterns(A_te,mnt,'compIndex',...
        options.compIdx,'showTitle', false, 'colorbarLim',[cbarLimLow, cbarLimUp]);
    
    fig_set(13,'Name','Patterns','Resize',[0.6 1.1])
    
    % Copy axes to a subplot scheme
    for f_idx=1:N_folds
        
        if options.showDataSplit
            ii = 0;
            row = 3;
            ax_new(f_idx) = subplotxl(row,N_folds,f_idx,...
                [0.1 0.1 0.1], [0.05 0.05 0.1]);
            col = repmat([1, 0, 0],N_folds,1); % training data in red
            col(f_idx,:) = [0 0 1]; % change color of test data to blue
            
            %plots the filled circles visualizing the test/training data
            scatter(x,y,200,col,'filled')
            ylim([0.7,1.3])
            axis off
            
            % add subfold label
            axes(ax_new(f_idx))
            pos = get(ax_new(f_idx),'position');
            xx= pos(1)+10*pos(3);
            yy= pos(2)+3*pos(4);
            tmp = text(xx, yy, ['Fold #',num2str(f_idx)]);
            set(tmp,'verticalAli','top', ...
                'horizontalAli','left', ...
                'color',[0 0 0],...
                'rotation',0, ...
                'Visible','on', ...
                'FontSize',16, ...
                'fontWeight','bold');
            
        else
            ii = 1;
            row = 2;
        end
        
        % assign the test patterns
        ax_new(f_idx+(1-ii)*N_folds) = subplotxl(row,N_folds,f_idx+(1-ii)*N_folds,[0.01 0.02 0.05], [0.05 0.02 0.1]);
        axis off;
        axis equal;
        ax_old = axes_te(f_idx).H.ax;
        copyobj(allchild(ax_old), ax_new(f_idx+(1-ii)*N_folds));
        if eq(f_idx,N_folds)
            plotutil_colorbarAside('vert');
        end
        close(h_te(f_idx))
        
        % assign the training patterns
        ax_new(f_idx+(2-ii)*N_folds) = subplotxl(row,N_folds,(f_idx+(2-ii)*N_folds),[0.01 0.02 0.05], [0.05 0.02 0.1]);
        axis off;
        axis equal;
        ax_old = axes_tr(f_idx).H.ax;
        copyobj(allchild(ax_old), ax_new(f_idx+(2-ii)*N_folds));
        if eq(f_idx,N_folds)
            plotutil_colorbarAside('vert');
        end
        close(h_tr(f_idx))
    end
    
    suptitle(['FreqBand [',num2str(params.band(1)),',',...
        num2str(params.band(2)),'] TimeWin [',num2str(params.ival(1)),...
        ',',num2str(params.ival(2)),'] MapFct ',params.mfctName,' DimSSD ',...
        num2str(params.dimsSSD)]);
    
    axes(ax_new(1+(1-ii)*N_folds))
    pos = get(ax_new(1+(1-ii)*N_folds),'position');
    xx= pos(1)-10*pos(3);
    yy= pos(2)+0.5*pos(4);
    tmp = text(xx, yy, 'test');
    set(tmp, 'verticalAli','top', ...
        'horizontalAli','center', ...
        'color',[0 0 1],...
        'rotation',90, ...
        'Visible','on', ...
        'FontSize',16, ...
        'fontWeight','bold');
    
    axes(ax_new(1+(2-ii)*N_folds))
    pos = get(ax_new(1+(2-ii)*N_folds),'position');
    xx= pos(1)-10*pos(3);
    yy= pos(2)+0.5*pos(4);
    tmp = text(xx, yy, 'training');
    set(tmp, 'verticalAli','top', ...
        'horizontalAli','center', ...
        'color',[1 0 0],...
        'rotation',90, ...
        'Visible','on', ...
        'FontSize',16, ...
        'fontWeight','bold');
    
    if options.saveToFile
        fband_str =  strjoin(strsplit(num2str(params.band,'%.0f %.0f')),'-');
        ival_str = strjoin(strsplit(num2str(int32(params.ival))),'-');
        fband_str(fband_str == '.') = 'p';
        savepic([dir_saveResults,'SSDPatterns_',params.mfctName,'_', ...
            'ival[',ival_str ,']','_','fband[',fband_str,']'], 'pdf');
        close all
    end

end

%% Figure 2: SSD frequency spectra across subfolds & eigenvalue spectra

if options.figFlags(2)
    
    % Prepare pattern matrices for each subfold on training and test data
    spec_tr = out.spec_ssd_tr; % contains the spectra of SSD filtered training data
    spec_te = out.spec_ssd_te; % contains the spectra of SSD filtered test data
    eig = out.score_ssd; % contains the SSD eigenvalue spectra for the subfolds
    
    opt_specPlot = {'freqBand', params.band,...
        'showLeg',false,... 
        'chLab',{'ssd1', 'ssd2', 'ssd4', 'ssd6', 'ssd9'}}; 
    
    opt_eigPlot = {'normalize', true,...
            'showCutOff', true, ...
            'cutDim',14};   
       
    fig_set(2,'Name','Frequency spectra','Resize',[0.7 1.7])
    
    for f_idx = 1:N_folds
        ax_new(f_idx) = subplotxl(3,N_folds,f_idx,[0.06 0.06 0.06], [0.06 0.06 0.06]);
        custom_plotFreqSpectrum(spec_te{f_idx}, opt_specPlot{:});
        ax_new(N_folds+f_idx) = subplotxl(3,N_folds,(N_folds+f_idx),[0.06 0.06 0.06], [0.06 0.06 0.06]);
        custom_plotFreqSpectrum(spec_tr{f_idx}, opt_specPlot{:});
        ax_new(2*N_folds+f_idx) = subplotxl(3,N_folds,(2*N_folds+f_idx),[0.06 0.06 0.06], [0.06 0.06 0.06]);
        custom_plotEigenvalueSpectrum(eig{f_idx}, opt_eigPlot{:});
    end
       
    suptitle(['FreqBand [',num2str(params.band(1)),',',...
        num2str(params.band(2)),'] TimeWin [',num2str(params.ival(1)),...
        ',',num2str(params.ival(2)),'] MapFct ',params.mfctName,' DimSSD ',...
        num2str(params.dimsSSD)]);
    
    axes(ax_new(1))
    pos = get(ax_new(1),'position');
    xx= pos(1)-160*pos(3);
    yy= pos(2)+0.5*pos(4);
    tmp = text(xx, yy, 'test');
    set(tmp, 'verticalAli','top', ...
        'horizontalAli','center', ...
        'color',[0 0 1],...
        'rotation',90, ...
        'Visible','on', ...
        'FontSize',16, ...
        'fontWeight','bold');
    
    axes(ax_new(1+N_folds))
    pos = get(ax_new(1+N_folds),'position');
    xx= pos(1)-160*pos(3);
    yy= pos(2)+0.5*pos(4);
    tmp = text(xx, yy, 'training');
    set(tmp, 'verticalAli','top', ...
        'horizontalAli','center', ...
        'color',[1 0 0],...
        'rotation',90, ...
        'Visible','on', ...
        'FontSize',16, ...
        'fontWeight','bold');
        
    
    if options.saveToFile
        fband_str =  strjoin(strsplit(num2str(params.band,'%.0f %.0f')),'-');
        ival_str = strjoin(strsplit(num2str(int32(params.ival))),'-');
        fband_str(fband_str == '.') = 'p';
        savepic([dir_saveResults,'FreqSpectra_',params.mfctName,'_', ...
            'ival[',ival_str ,']','_','fband[',fband_str,']'], 'pdf');
        close all
    end

end


        
end
