function custom_plotSPoC(output, dir_saveResults, varargin)
% custom_plotSPoC - visualizes the results of a SPoC analysis consisting 
% of a chron. 5-fold crossvalidation procedure for a fixed paramter setting. 
% The function returns two figures that can be accessed independently.
%
% Synopsis
%  custom_plotSPoC(output, dir_saveResults, params, varargin)
%
% Arguments: 
%   output : struct generated by the function custom_spoc() containing all
%   the results and parameter settings from a SPoC analysis on a single 
%   parameter setting
%   dir_saveResults: directory for saving the figures
%
% Options:
%   saveToFile: optional flag to save the plots to a file
%   spocCompIdx: specifies the index of the SPoC component that will be
%   visualized
%   figFlags: array containing flags for each plot (e.g. [1 0] only creates
%   Fig. 1)
%
% Returns:
%   -
%
%
% Andreas Meinel, December 2014

%% Setting up the default values 

def_saveToFile = false; % saves the figures to file
def_spocCompIdx = 1; % specifies the index of the SPoC component
def_figFlags = [1 1]; % flags to en- or disable the two figures
def_fig1Size = [0.85 1]; % size of figure 1
def_fig2Size = [0.6 1.4]; % size of figure 1
def_showEig = true; % flag to display the SPoC eigenvalue spectra
def_showDataSplit = true; % flag to visualize the training/test data split

p = inputParser;
p.KeepUnmatched = 1;

addParamValue(p,'saveToFile', def_saveToFile);
addParamValue(p,'spocCompIdx', def_spocCompIdx);
addParamValue(p,'figFlags', def_figFlags);
addParamValue(p,'fig1Size', def_fig1Size);
addParamValue(p,'fig2Size', def_fig2Size);
addParamValue(p,'showEig', def_showEig);
addParamValue(p,'showDataSplit', def_showDataSplit);

parse(p,varargin{:})
options = p.Results;

% using the unmatched input arguments
opt_unmat = [fieldnames(p.Unmatched),struct2cell(p.Unmatched)]; 
opt_unmat = reshape(opt_unmat',[1,size(opt_unmat,1)*size(opt_unmat,2)]);

%% Plotting the SPoC results 

params = output.params;
xval_corr = output.xval_corr;
out = output.out;
z_map = output.z;
N_folds = size(xval_corr,2);
N_comp = out.n_components;
if isfield(params,'metricLabel')
    metricLabel = params.metricLabel;
else 
    metricLabel = '';
end

mnt = mnt_setElectrodePositions(params.clab);
close all

if isfield(out,'corrTest')
    
    %% Figure 1: SPoC output inspection
    
    if (options.figFlags(1))
        
        fig_set(1,'Name','Prediction','Resize',options.fig1Size)
        %     figure('Units','pixels','position',[0 0 800 800]);
        % set(gca,'FontSize',11)
        
        % Estimated target variable across trials
        z_est = out.z_est;
        idx_folds = out.test_idx;
        subplot(3,8,[1 4]),
        opts_sp1 = {'idxFolds',idx_folds,...
            opt_unmat{:}};
        custom_plotTargetVarTrials(z_map, z_est, opts_sp1{:});
        
        % Scatter plot with estimated and true target variable
        subplot(3,8,[5 6]),
        custom_plotTargetVarScatter(z_map, z_est,'idxFolds',idx_folds);
        
         % Separability plot
        subplot(3,8,[7 8]),
        if ~strcmp(metricLabel,'RT')
            zScaling = 100;
        else
            zScaling = 1;
        end
        custom_plotPerfSeparation(output, z_map,'','fontSize',8,...
            'metricLabel',metricLabel,'zScaling',zScaling,'legPos',...
            [0.88 0.78 0.1 0.1]);
        
        % Correlation values and pattern similarity across subfolds
        corrTest = out.corrTest;
        corrTrain = out.corrTrain;
        if size(corrTest.single_comp,1)==1
            corr_te = [corrTest.single_comp];
            corr_tr = [corrTrain.single_comp];
        else
            corr_te = [corrTest.single_comp; corrTest.regr];
            corr_tr = [corrTrain.single_comp; corrTrain.regr];
        end
        [corrAll, corr_pval] = corr(z_map',z_est');
        if isempty(out.EMD_train{1})
            subplot(3,8,[9 12]),
            custom_plotMeasureFolds(corr_te','corrAll',corrAll,'metricName',...
                'Corr','case','test','corr_pval',corr_pval);
            subplot(3,8,[13 16]),
            custom_plotMeasureFolds(corr_tr','corrAll', mean(corrTrain.regr),...
                'metricName','Corr','case','train');
        else
            subplot(3,8,[9 10]),
            custom_plotMeasureFolds(corr_te','corrAll',corrAll,'metricName',...
                'Corr','case','test','corr_pval',corr_pval);
            subplot(3,8,[13 14]),
            custom_plotMeasureFolds(corr_tr','corrAll', mean(corrTrain.regr),...
                'metricName','Corr','case','train');
            EMD_test = out.EMD_test;
            EMD_train = out.EMD_train;
            EMD_te = NaN(N_comp,N_folds);
            EMD_tr = NaN(N_comp,N_folds);
            for f_idx = 1:size(EMD_test,2)
                EMD_te(:,f_idx) = EMD_test{f_idx}(1,:);
                EMD_tr(:,f_idx) = EMD_train{f_idx}(1,:);
            end
            subplot(3,8,[11 12]),
            custom_plotMeasureFolds(EMD_te','corrAll',mean(mean(EMD_te)),...
                'metricName','EMD','case','test');
            subplot(3,8,[15 16]),
            custom_plotMeasureFolds(EMD_tr','corrAll',mean(mean(EMD_tr)),...
                'metricName','EMD','case','train');
        end
        
        % Spectrum raw data
        spec_raw = out.spec_no_ssd{:};
        subplot(3,8,[17 18]),
        custom_plotFreqSpectrum(spec_raw, 'showFreqBand', true, 'freqBand', params.band,...
            'chLab',{'Cz','Fz','P3','P4','Pz'}, 'showLeg',true, 'legPos', [0.05 0.2 0.01 0.01],...
            'fontSize',9);
        
        % Patterns of all SPoC components utilizing all data (outside CV scheme)
        N_comp_plot = N_comp;
        if N_comp > 6
            N_comp_plot = 6;
        end
        for jj=1:N_comp_plot
            if N_comp < 4
                subplot(3,8,[19+2*(jj-1),20+2*(jj-1)]), plot_scalp(mnt, out.A_alldata{1}(:,jj),'Extrapolation',1,'ExtrapolateToMean',1,...
                    'ContourLineprop',{'LineWidth',0.2},'Resolution',200,'LineProperties',{'LineWidth',2},'ScalePos','none');
            else 
                subplot(3,8,[19+(jj-1)]), plot_scalp(mnt, out.A_alldata{1}(:,jj),'Extrapolation',1,'ExtrapolateToMean',1,...
                    'ContourLineprop',{'LineWidth',0.2},'Resolution',200,'LineProperties',{'LineWidth',2},'ScalePos','none');
            end
        end
        
        fband_str =  strjoin(strsplit(num2str(params.band,'%.1f %.1f')),'-');
        suptitle(['FreqBand [',fband_str,'] TimeWin [',...
            num2str(params.ival(1)),',',num2str(params.ival(2)),'] MapFct ',params.mfctName,...
            ' DimSSD ', num2str(params.dimsSSD)]);
        
        if options.saveToFile
            fband_str =  strjoin(strsplit(num2str(params.band,'%.0f %.0f')),'-');
            ival_str = strjoin(strsplit(num2str(int32(params.ival))),'-');
            fband_str(fband_str == '.') = 'p';
            savepic([dir_saveResults,'SPoC_',params.mfctName,'_', ...
                'ival[',ival_str ,']','_','fband[',fband_str,']'], 'pdf');
            close all
        end
        
    end
           
else
    
    %% Figure 1: SPoC output inspection
    % this is the previous version where the SPoC outcome metrics are not
    % shown for all components arising from SPoC-lambda in a single plot
    
    if (options.figFlags(1))
        
        fig_set(1,'Name','Prediction','Resize',options.fig1Size)
        %     figure('Units','pixels','position',[0 0 800 800]);
        % set(gca,'FontSize',11)
        
        % Estimated target variable across trials
        z_est = out.z_est;
        idx_folds = out.test_idx;
        subplot(2,4,[1 3]),
        opts_sp1 = {'idxFolds',idx_folds,...
            opt_unmat{:}};
        custom_plotTargetVarTrials(z_map, z_est, opts_sp1{:});
        
        % Scatter plot with estimated and true target variable
        subplot(2,4,4),
        custom_plotTargetVarScatter(z_map, z_est,'idxFolds',idx_folds);
        
        % Correlation values and pattern similarity across subfolds
        corrTest = xval_corr;
        corrTrain = out.corr_tr;
        [corrAll, corr_pval] = corr(z_map',z_est');
        if isempty(out.EMD_train{1})
            subplot(2,4,[5 6]),
            custom_plotCorrFolds(corrTest, 'corrTrain', corrTrain, 'corrAll', corrAll, 'corr_pval', corr_pval);
        else
            subplot(2,4,5),
            custom_plotCorrFolds(corrTest, 'corrTrain', corrTrain, 'corrAll', corrAll, 'corr_pval', corr_pval);
            EMD_test = out.EMD_test;
            EMD_train = out.EMD_train;
            for f_idx = 1:size(EMD_test,2)
                EMD_te(f_idx,options.spocCompIdx) = EMD_test{f_idx}(:,options.spocCompIdx);
                EMD_tr(f_idx,options.spocCompIdx) = EMD_train{f_idx}(:,options.spocCompIdx);
            end
            subplot(2,4,6),
            custom_plotMetricFolds(EMD_te(:,options.spocCompIdx), 'train', EMD_tr(:,options.spocCompIdx));
        end
        
        % Spectrum raw data
        spec_raw = out.spec_no_ssd{:};
        subplot(2,4,7),
        custom_plotFreqSpectrum(spec_raw, 'showFreqBand', true, 'freqBand', params.band,...
            'chLab',{'Cz','Fz','P3','P4','Pz'}, 'showLeg',true, 'legPos', [0.1 0.2 0.02 0.02],...
            'fontSize',9);
        
        % Pattern of 1st SPoC component utilizing all data (outside CV scheme)
        subplot(2,4,8), plot_scalp(mnt, out.A_alldata{1}(:,options.spocCompIdx),'Extrapolation',1,'ExtrapolateToMean',1,...
            'ContourLineprop',{'LineWidth',0.2},'Resolution',200,'LineProperties',{'LineWidth',2})
        
        fband_str =  strjoin(strsplit(num2str(params.band,'%.1f %.1f')),'-');
        suptitle(['FreqBand [',fband_str,'] TimeWin [',...
            num2str(params.ival(1)),',',num2str(params.ival(2)),'] MapFct ',params.mfctName,...
            ' DimSSD ', num2str(params.dimsSSD)]);
        
        if options.saveToFile
            fband_str =  strjoin(strsplit(num2str(params.band,'%.0f %.0f')),'-');
            ival_str = strjoin(strsplit(num2str(int32(params.ival))),'-');
            fband_str(fband_str == '.') = 'p';
            savepic([dir_saveResults,'SPoC_',params.mfctName,'_', ...
                'ival[',ival_str ,']','_','fband[',fband_str,']'], 'pdf');
            close all
        end
        
    end
    
end

%% Figure 2: SPoC Patterns on training and test data for one component

if options.showEig
    row = 3;
else
    row = 2;
end

if options.figFlags(2)
    
    % Prepare pattern matrices for each subfold on training and test data
    A_tr = out.A_train;
    A_te = out.A_test;
    eig = out.eig_spoc;
    
    % initialize the colorbar limits of the patterns
    cbarLimUp = 0;
    cbarLimLow = 0;
    
    for ii=1:N_folds
        tmpUp = max(A_tr{ii}(:,options.spocCompIdx));
        tmpLow = min(A_tr{ii}(:,options.spocCompIdx));
        if tmpUp > cbarLimUp
            cbarLimUp = tmpUp;
        elseif tmpLow < cbarLimLow
            cbarLimLow = tmpLow;
        end
        tmpUp = max(A_te{ii}(:,options.spocCompIdx));
        tmpLow = min(A_te{ii}(:,options.spocCompIdx));
        if tmpUp > cbarLimUp
            cbarLimUp = tmpUp;
        elseif tmpLow < cbarLimLow
            cbarLimLow = tmpLow;
        end
    end
    
    opt_eigPlot = {'normalize', true,...
        'showCutOff', true,...
        'cutDim', options.spocCompIdx,...
        'xLabel', '',...
        'yLabel', ''};
    
    % Plot patterns across subfolds
    [axes_tr, h_tr] = custom_plotSubfoldPatterns(A_tr,mnt,'compIndex',...
        options.spocCompIdx, 'showTitle', false, 'colorbarLim',[cbarLimLow, cbarLimUp]);
    [axes_te, h_te] = custom_plotSubfoldPatterns(A_te,mnt,'compIndex',...
        options.spocCompIdx, 'showTitle', false, 'colorbarLim',[cbarLimLow, cbarLimUp]);
    
    % variables for the test/training set visualization
    x = 1:1:N_folds;
    y = ones(1,N_folds);
    
    fig_set(12,'Name','Patterns','Resize',options.fig2Size)
    
    % Copy axes to a subplot scheme
    for f_idx=1:N_folds
        
        if options.showDataSplit
            ii = 0;
            row = 4;
            ax_new(f_idx) = subplotxl(row,N_folds,f_idx,...
                [0.1 0.1 0.1], [0.05 0.05 0.1]);
            col = repmat([1, 0, 0],N_folds,1); % training data in red
            col(f_idx,:) = [0 0 1]; % change color of test data to blue
            
            %plots the filled circles visualizing the test/training data
            scatter(x,y,200,col,'filled')
            ylim([0.7,1.3])
            axis off
            
            % add subfold label
            axes(ax_new(f_idx))
            pos = get(ax_new(f_idx),'position');
            xx= pos(1)+10*pos(3);
            yy= pos(2)+5*pos(4);
            tmp = text(xx, yy, ['Fold #',num2str(f_idx)]);
            set(tmp,'verticalAli','top', ...
                'horizontalAli','left', ...
                'color',[0 0 0],...
                'rotation',0, ...
                'Visible','on', ...
                'FontSize',16, ...
                'fontWeight','bold');
            
        else
            ii = 1;
        end
        
        % assign the test patterns
        ax_new(f_idx+(1-ii)*N_folds) = subplotxl(row,N_folds,(f_idx+(1-ii)*N_folds),...
            [0.01 0.02 0.05], [0.05 0.02 0.1]);
        axis off;
        axis equal;
        ax_old = axes_te(f_idx).H.ax;
        copyobj(allchild(ax_old), ax_new(f_idx+(1-ii)*N_folds));
        if eq(f_idx,N_folds)
            plotutil_colorbarAside('vert');
        end
        close(h_te(f_idx))
        
        % assign the training patterns
        ax_new(f_idx+(2-ii)*N_folds) = subplotxl(row,N_folds,(f_idx+(2-ii)*N_folds),...
            [0.01 0.02 0.05], [0.05 0.02 0.1]);
        axis off;
        axis equal;
        ax_old = axes_tr(f_idx).H.ax;
        copyobj(allchild(ax_old), ax_new(f_idx+(2-ii)*N_folds));
        if eq(f_idx,N_folds)
            plotutil_colorbarAside('vert');
        end
        close(h_tr(f_idx))
        
        if options.showEig
            ax_new(f_idx+(3-ii)*N_folds) = subplotxl(row,N_folds,(f_idx+(3-ii)*N_folds),...
                [0.05 0.05 0.05], [0.05 0.02 0.1]);
            custom_plotEigenvalueSpectrum(eig{f_idx}, opt_eigPlot{:});
        end
        
    end
    
    fband_str =  strjoin(strsplit(num2str(params.band,'%.1f %.1f')),'-');
    suptitle(['FreqBand [',fband_str,'] TimeWin [',num2str(params.ival(1)),...
        ',',num2str(params.ival(2)),'] MapFct ',params.mfctName,' DimSSD ',...
        num2str(params.dimsSSD)]);
    
    axes(ax_new(1+(1-ii)*N_folds))
    pos = get(ax_new(1+(1-ii)*N_folds),'position');
    xx= pos(1)-10*pos(3);
    yy= pos(2)+0.5*pos(4);
    tmp = text(xx, yy, 'test');
    set(tmp, 'verticalAli','top', ...
        'horizontalAli','center', ...
        'color',[0 0 1],...
        'rotation',90, ...
        'Visible','on', ...
        'FontSize',16, ...
        'fontWeight','bold');
    
    axes(ax_new(1+(2-ii)*N_folds))
    pos = get(ax_new(1+(2-ii)*N_folds),'position');
    xx= pos(1)-10*pos(3);
    yy= pos(2)+0.5*pos(4);
    tmp = text(xx, yy, 'training');
    set(tmp, 'verticalAli','top', ...
        'horizontalAli','center', ...
        'color',[1 0 0],...
        'rotation',90, ...
        'Visible','on', ...
        'FontSize',16, ...
        'fontWeight','bold');
    
    if options.saveToFile
        fband_str =  strjoin(strsplit(num2str(params.band,'%.0f %.0f')),'-');
        ival_str = strjoin(strsplit(num2str(int32(params.ival))),'-');
        fband_str(fband_str == '.') = 'p';
        savepic([dir_saveResults,'Pattern_',params.mfctName,'_', ...
            'ival[',ival_str ,']','_','fband[',fband_str,']'], 'pdf');
        close all
    end
    
end

end


