function custom_plotSeparability(output, z, dir_saveResults, varargin)
% custom_plotSeparability - visualizes the results of a performance metric
% prediction (e.g. by oscillatory SPoC components) and the true measured
% labels.
% The function returns two figures that can be accessed independently.
%
% Synopsis
%  custom_plotSeparability(output, z, dir_saveResults, varargin)
%
% Arguments: 
%   output : struct generated by the function custom_spoc() containing all
%   the results and parameter settings from a SPoC analysis on a single 
%   parameter setting
%   z: target variable
%   dir_saveResults: directory for saving the figure
%
% Options:
%   saveToFile: optional flag to save the plots to a file
%   prctile: chooses a percentile of the data (e.g. 20% highest and lowest
%   values of target variable z)
%   metricLabel: define the label of the target variable (e.g. RT (ms))
%   legend: specifies the legend of the separability plot
%   colormapFolds: specifies the colormap that is used to shade the fold
%   division
%
% Returns:
%   -
%
%
% Andreas Meinel, April 2015

%% Setting up the default values 

def_saveToFile = false; % saves the figures to file
% def_figFlags = [1 1]; % flags to en- or disable the two figures
def_prctile = 20; % determines the percentile of e.g. fast. vs. slow RTs 
def_metricLabel = 'RT (ms)';
def_legend = {'high','low','high - est','low - est'};
% def_idxFolds = []; % vector. [nfolds, nsamples] Shading the area of the trials corresponding to each of the subplots
def_colormapFolds = @(x) summer(x); % Colormap for the shade areas of the subplots
def_zScaling = 1; % factor scaling up the target variable (if the target variable is too small, the distribution fits don't work)

p = inputParser;

addParamValue(p,'saveToFile', def_saveToFile);
% addParamValue(p,'figFlags', def_figFlags);
addParamValue(p,'prctile', def_prctile);
addParamValue(p,'metricLabel', def_metricLabel);
addParamValue(p,'legend', def_legend);
% addParamValue(p,'idxFolds',def_idxFolds);
addParamValue(p,'colormapFolds',def_colormapFolds);
addParamValue(p,'zScaling',def_zScaling);

parse(p,varargin{:})
options = p.Results;


%% Extracting the SPoC results 

close all

params = output.params;
out = output.out;
z_est = zscore(out.z_est);
z_norm = zscore(z);

idx_folds = out.test_idx;

%% Fig.1: Prediction accuracy

figh = figure('Units','points','position',[200, 200, 800,550]);
ax1 = subplot(2,3,[1,2,3]);

z_err = (z_norm-z_est);
ylim_vec = [1.1*min(z_err),1.1*max(z_err)];

if ~isempty(idx_folds)
    colors = options.colormapFolds(numel(idx_folds));
    for i = 1:numel(idx_folds)
        upper = repmat(ylim_vec(2),1,length(idx_folds{i}));
        lower = repmat(ylim_vec(1),1,length(idx_folds{i}));
        color = colors(i,:);
        edgec = color;
        add = 1;
        transparency = 0.3;
        jbfill(idx_folds{i},upper,lower,color,edgec,add,transparency);
    end
end

axes(ax1); hold on
plot(z_err,'b','LineWidth',1.5)
set(gca, 'FontSize', 16)
grid on
axis on
xlim([0 length(z)])
ylim(ylim_vec)
xlabel('trial #')
ylabel('prediction error {z-z_{est}}/{\sigma_{z}}')

% % boxplot of the prediction error
% ax2 = subplot(2,3,3); 
% boxplot(z_err)
% set(gca, 'FontSize', 16, 'XTickLabel',{' '})
% axis on
% ylabel('{z-z_{est}}/{\sigma_{z}}')
% ylim(ylim_vec)   

%% Fig. 2: Separability of the performance metric 

% scale up the target variable (required if e.g. z is between -2 and 2 =>
% the distribution fits don't work properly)
z_est = options.zScaling*z_est;
z = options.zScaling*z;

% get high/low performance percentiles according to true z

Y_true = prctile(z,[options.prctile,100-options.prctile]);
%     Y_true = prctile(z,[20,80]);
idx_slow = find(z<Y_true(1));
idx_fast = find(z>Y_true(2));

z_slow = z(idx_slow);
z_fast = z(idx_fast);

x_dist = ((1-0.05*sign(min(z)))*round(min(z))):((1+0.05*sign(max(z)))*round(max(z)));
pd_slow=fitdist(z_slow','Kernel','Kernel','normal');
z_distSlow = pdf(pd_slow,x_dist);
pd_fast=fitdist(z_fast','Kernel','Kernel','normal');
z_distFast = pdf(pd_fast,x_dist);

% get high/low performance percentiles of z according to prediction z_est

Y_est = prctile(z_est,[20,80]);
idx_slow2 = find(z_est<Y_est(1));
idx_fast2 = find(z_est>Y_est(2));

% extracting low & high performance trials of true z distribution according 
% to percentiles of the prediction distribution
z_slow_est = z(idx_slow2);
z_fast_est = z(idx_fast2);

pd_slow2=fitdist(z_slow_est','Kernel','Kernel','normal');
z_distSlow2 = pdf(pd_slow2,x_dist);
pd_fast2=fitdist(z_fast_est','Kernel','Kernel','normal');
z_distFast2 = pdf(pd_fast2,x_dist);

ax3 = subplot(2,3,[4,5,6]);
l(1) = plot(x_dist,z_distSlow,'k-','LineWidth',2); hold on;
l(2) = plot(x_dist,z_distFast,'LineWidth',2,'Color',[0,0.8,0.3]); hold on;
l(3) = plot(x_dist,z_distSlow2,'k--','LineWidth',2); hold on;
l(4) = plot(x_dist,z_distFast2,'--','LineWidth',2,'Color',[0,0.8,0.3]); 
set(gca, 'FontSize', 16)
title([num2str(options.prctile),' percentiles'])
grid on
axis on
legend(l,options.legend,'Location','NorthEast')
ylabel('pdf (a.u.)')
if options.zScaling > 1
    xlabel([num2str(options.zScaling),'\cdot',options.metricLabel])
else
    xlabel(options.metricLabel)
end
  
    
%     dist_figh = figure; 
%     n_folds = 5;
%     n_epos = length(z);
%     [divTr, divTe] = sample_chronKFold(ones(1,n_epos), n_folds);
%     
%     for j = 1:n_folds
%         z_mapFold = z(divTe{1}{j});
%         z_estFold = z_est(divTe{1}{j});
%         
%         switch sign(output.xval_corr(j))
%             case 1
%                 [z_estSorted, idx] = sort(z_estFold,'ascend');
%             case -1
%                 [z_estSorted, idx] = sort(z_estFold,'descend');
%                 disp('aqui');
%         end
%         z_mapSorted = z(idx);
%         
%         x_dist = 100:900;
%         fit = z_mapSorted(round(end/2):end);
%         pd=fitdist(fit(randperm(length(fit)))','Kernel','Kernel','normal');
%         z_distAll(j,:) = pdf(pd,x_dist);
%         fit = z_mapSorted(1:round(end/2));
%         pd=fitdist(fit(randperm(length(fit)))','Kernel','Kernel','normal');
%         z_distBest(j,:) = pdf(pd,x_dist);
%         
%     end
    
if options.saveToFile
    fband_str =  strjoin(strsplit(num2str(params.band,'%.0f %.0f')),'-');
    ival_str = strjoin(strsplit(num2str(int32(params.ival))),'-');
    fband_str(fband_str == '.') = 'p';
    savefig([dir_saveResults,'_Separability_',params.mfctName,'_', ...
        'ival[',ival_str ,']','_','fband[',fband_str,']'],figh, 'pdf');
    close all
end
           
end
